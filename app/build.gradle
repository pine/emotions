apply plugin: 'org.springframework.boot'

bootRun {
    def properties = new Properties()
    def secrets = rootProject.file("credentials/secrets.properties")
    if (secrets.exists()) {
        properties.load(secrets.newDataInputStream())
    }

    systemProperties = properties
}

dependencies {
    // Sub-projects
    implementation project(':lib-bookmeter')
    implementation project(':lib-gravatar')
    implementation project(':lib-cloudstorage')
    implementation project(':lib-twitter')

    // Spring Framework
    implementation 'org.springframework.boot:spring-boot-starter-batch'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-webflux'
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.retry:spring-retry'
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.batch:spring-batch-test'

    // Jasypt
    implementation 'com.github.ulisesbocchio:jasypt-spring-boot-starter'

    // Redis
    implementation 'io.lettuce:lettuce-core'

    // Apache Commons
    implementation 'commons-io:commons-io'
    implementation 'org.apache.commons:commons-collections4'
    implementation 'org.apache.commons:commons-lang3'

    // Utilities
    implementation 'com.google.guava:guava'
    implementation 'com.github.maricn:logback-slack-appender'
}
