buildscript {
    ext {
        springBootVersion = '2.1.3.RELEASE'
        lombokVersion = '1.18.6'
    }
    repositories {
        jcenter()
        maven { url 'https://plugins.gradle.org/m2/' }
    }
    dependencies {
        classpath "org.springframework.boot:spring-boot-gradle-plugin:$springBootVersion"
        classpath 'io.spring.gradle:dependency-management-plugin:1.0.5.RELEASE'
        classpath "gradle.plugin.com.github.spotbugs:spotbugs-gradle-plugin:1.6.11"
    }
}


def confFiles = fileTree("conf").include("**/*.yml", "**/*.json")
confFiles.forEach { File src ->
    def dest = new File(
        src.absolutePath.replace(rootDir.absolutePath + "/conf", rootDir.absolutePath))
    if (src.name.endsWith(".yml")) {
        dest.write("# This YAML source file was generated by the Gradle.\n\n")
    } else {
        dest.setBytes([] as byte[])
    }
    dest.append(src.readBytes())
}


subprojects {
    apply plugin: 'java'
    apply plugin: 'eclipse'
    apply plugin: 'idea'
    apply plugin: 'io.spring.dependency-management'
    apply plugin: "com.github.spotbugs"

    group 'moe.pine.emotions'

    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8

    repositories {
        jcenter()
    }
    dependencyManagement {
        imports {
            mavenBom org.springframework.boot.gradle.plugin.SpringBootPlugin.BOM_COORDINATES
            mavenBom 'com.google.cloud:google-cloud-bom:0.82.0-alpha'
        }
        dependencies {
            dependency 'org.jetbrains:annotations:17.0.0'
            dependency 'javax.servlet:javax.servlet-api:4.0.1'

            // Guava
            dependency 'com.google.guava:guava:27.0.1-jre'

            // SDK
            dependency 'org.twitter4j:twitter4j-core:4.0.7'
            dependency 'org.apache.xmlrpc:xmlrpc-client:3.1.3'

            // Apache Commons
            dependency 'commons-codec:commons-codec:1.11'
            dependency 'org.apache.commons:commons-lang3:3.8.1'
            dependency 'org.apache.commons:commons-collections4:4.3'

            // Test
            dependency 'junit:junit:4.12'
            dependency 'org.mockito:mockito-core:2.24.5'
            dependency 'org.powermock:powermock-reflect:2.0.0'
        }
    }
    dependencies {
        // Lombok
        annotationProcessor "org.projectlombok:lombok:$lombokVersion"
        compileOnly "org.projectlombok:lombok:$lombokVersion"
        testAnnotationProcessor "org.projectlombok:lombok:$lombokVersion"
        testCompileOnly "org.projectlombok:lombok:$lombokVersion"

        // Logging
        implementation 'org.slf4j:slf4j-api'
        implementation 'ch.qos.logback:logback-classic'

        // Utilities
        implementation 'com.google.guava:guava'
        implementation 'org.apache.commons:commons-lang3'
        implementation 'org.apache.commons:commons-collections4'
        implementation 'org.jetbrains:annotations'

        // Test
        testImplementation 'junit:junit'
        testImplementation 'org.mockito:mockito-core'
        testImplementation 'org.powermock:powermock-reflect'
    }


    // ----- SpotBugs -------------------------------------

    spotbugs {
        toolVersion = '3.1.8'
        excludeFilter = file("${project.rootDir}/findbugs-exclude.xml")
        spotbugsTest.enabled = false
    }
    tasks.withType(com.github.spotbugs.SpotBugsTask) {
        reports {
            xml.enabled = false
            html.enabled = true
        }
    }
}
