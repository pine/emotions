buildscript {
    ext {
        googleCloudBomVersion = '0.110.0-alpha'
        springBootVersion = '2.3.2.RELEASE'
        kotlinVersion = '1.3.50'
        lombokVersion = '1.18.6'
        lettuceVersion = '5.1.6.RELEASE'
        okhttp3Version = '4.2.2'
        powermockVersion = '2.0.2'
    }
    repositories {
        jcenter()
        maven { url 'https://plugins.gradle.org/m2/' }
        maven { url 'https://repo.spring.io/plugins-release' }
    }
    dependencies {
        classpath "org.springframework.boot:spring-boot-gradle-plugin:$springBootVersion"
        classpath 'io.spring.gradle:dependency-management-plugin:1.0.5.RELEASE'
        classpath 'io.spring.gradle:propdeps-plugin:0.0.9.RELEASE'
        classpath 'gradle.plugin.com.github.spotbugs.snom:spotbugs-gradle-plugin:4.4.4'
        classpath 'net.rdrei.android.buildtimetracker:gradle-plugin:0.11.0'
    }
}


allprojects {
    apply plugin: 'java'
    apply plugin: 'idea'
    apply plugin: 'propdeps'
    apply plugin: 'propdeps-maven'
    apply plugin: 'propdeps-idea'

    group 'moe.pine.emotions'

    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11

    repositories {
        jcenter()
    }

    compileJava {
        options.encoding = 'UTF-8'
        options.compilerArgs << '-Xlint:unchecked'
        options.compilerArgs << '-Xlint:deprecation'
    }


    // ----- JaCoCo ---------------------------------------

    apply plugin: 'jacoco'

    jacoco {
        toolVersion = '0.8.3'
    }
}

subprojects {
    apply plugin: 'io.spring.dependency-management'

    dependencyManagement {
        imports {
            mavenBom org.springframework.boot.gradle.plugin.SpringBootPlugin.BOM_COORDINATES
            mavenBom "com.google.cloud:google-cloud-bom:$googleCloudBomVersion"
            mavenBom "org.jetbrains.kotlin:kotlin-bom:$kotlinVersion"
            mavenBom 'org.testcontainers:testcontainers-bom:1.15.0-rc1'
        }
        dependencies {
            dependency 'javax.servlet:javax.servlet-api:4.0.1'
            dependency 'org.hibernate:hibernate-validator:6.1.5.Final'

            // Guava
            dependency 'com.google.guava:guava:27.0.1-jre'

            // SDK
            dependency 'org.twitter4j:twitter4j-core:4.0.7'
            dependency 'org.apache.xmlrpc:xmlrpc-client:3.1.3'

            // Apache Commons
            dependency 'commons-codec:commons-codec:1.11'
            dependency 'commons-fileupload:commons-fileupload:1.4'
            dependency 'org.apache.commons:commons-lang3:3.8.1'
            dependency 'org.apache.commons:commons-collections4:4.3'
            dependency 'org.apache.httpcomponents:httpclient:4.5.10'

            // Redis
            dependency "io.lettuce:lettuce-core:$lettuceVersion"

            // HTML parser
            dependency 'org.jsoup:jsoup:1.12.1'

            // Utilities
            dependency "org.projectlombok:lombok:$lombokVersion"
            dependency 'moe.pine:heroku-addons:0.3.1'
            dependency 'moe.pine:spring-cache-interceptors:0.1.2'

            // Test
            dependency 'junit:junit:4.12'
            dependency 'org.mockito:mockito-core:2.24.5'
            dependency "org.powermock:powermock-reflect:$powermockVersion"
            dependency "org.powermock:powermock-api-mockito2:$powermockVersion"
            dependency "org.powermock:powermock-module-junit4:$powermockVersion"
            dependency "com.squareup.okhttp3:okhttp:$okhttp3Version"
            dependency "com.squareup.okhttp3:mockwebserver:$okhttp3Version"
        }
    }
    dependencies {
        // Lombok
        annotationProcessor 'org.projectlombok:lombok'
        compileOnly 'org.projectlombok:lombok'
        testAnnotationProcessor 'org.projectlombok:lombok'
        testCompileOnly 'org.projectlombok:lombok'

        // Annotations
        compileOnly 'net.jcip:jcip-annotations:1.0'
        compileOnly 'com.github.spotbugs:spotbugs-annotations:3.1.3'

        // Logging
        implementation 'org.slf4j:slf4j-api'
        implementation 'ch.qos.logback:logback-classic'
    }


    // ----- SpotBugs -------------------------------------

    apply plugin: 'com.github.spotbugs'

    spotbugs {
        toolVersion = '3.1.8'
        excludeFilter = file("${project.rootDir}/config/findbugs-exclude.xml")
        spotbugsTest.enabled = false
    }
    spotbugsMain {
        reports {
            xml.enabled = false
            html.enabled = true
        }
    }


    // ----- Checkstyle -----------------------------------

    apply plugin: 'checkstyle'

    checkstyle {
        toolVersion = '8.18'
        configFile = file("${project.rootDir}/config/checkstyle.xml")
    }
}


// ----- JaCoCo -------------------------------------------

task jacocoMerge(type: JacocoMerge) {
    dependsOn(subprojects.jacocoTestReport.dependsOn)
    mustRunAfter(subprojects.jacocoTestReport.mustRunAfter)
    destinationFile = file("${buildDir}/jacoco/test.exec")
    executionData = files(subprojects.jacocoTestReport.executionData)
        .filter { f -> f.exists() }
}

jacocoTestReport {
    dependsOn(jacocoMerge)
    reports {
        xml.enabled = true
        html.enabled = true
    }

    additionalSourceDirs.setFrom(files(subprojects.sourceSets.main.allSource.srcDirs))
    sourceDirectories.setFrom(files(subprojects.sourceSets.main.allSource.srcDirs))
    classDirectories.setFrom(files(subprojects.sourceSets.main.output))
}


// ----- Build Time Tracker -------------------------------

apply plugin: 'build-time-tracker'

buildtimetracker {
    reporters {
        summary {
          ordered true
          barstyle 'ascii'
        }
    }
}


// ----- Configuration ------------------------------------

def confFiles = fileTree('credentials').include('**/*.yml', '**/*.json')
confFiles.forEach { File src ->
    def dest = new File(
        src.absolutePath.replace("${rootDir.absolutePath}/credentials", rootDir.absolutePath))
    if (src.name.endsWith('.yml')) {
        dest.write("# This YAML source file was generated by the Gradle.\n\n")
    } else {
        dest.setBytes([] as byte[])
    }
    dest.append(src.readBytes())
}
